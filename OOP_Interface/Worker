<?php
declare(strict_types=1);

require_once 'EmployeeInterface';
class Worker implements EmployeeInterface
{
    public $name;
    private $age;
    private $salary;
    private $position;
    private $startDay;

    public function __construct(string $name, int $age, DateTimeInterface $startDay, float $salary, string $position)
    {
        $this->name = $name;
        $this->setAge($age);
        $this->setStartDay($startDay);
        $this->setSalary($salary);
        $this->setPosition($position);
    }

    public function setPosition($position)
    {
        if ($this->checkPosition($position)) {
            $this->position = $position;
        }
    }

    public function getPosition(): string
    {
        return $this->position; // TODO: Implement getPosition() method.
    }

    public function setStartDay($startDay): DateTimeInterface
    {
        $date = new $startDay;
        $date->format('Y-m-d');
        return $this->startDay = $startDay;
    }

    public function getStartDay(): object
    {
        return $this->startDay; // TODO: Implement getStartDay() method.
    }

    public function setName($name): string
    {
        $this->name = $name;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setAge($age)
    {
        if ($this->checkAge($age)) {
            $this->age = $age;
        }
    }

    public function getAge():int
    {
        return $this->age;
    }

    public function setSalary($salary) {
        $this->salary = $salary;
    }

    public function getSalary(): float
    {
        $sumOfSalary = $this->salary + ($this->salary * $this->workTime() * 0.05);
       return floor($sumOfSalary);
    }

    private function checkAge($age) {
        if ($age >= 1 && $age < 100) {
            return true;
        } return false;
    }
    private function checkPosition($position) {
        if ($position == "worker" || $position == "manager") {
            return true;
        }
        return false;
    }

    private function workTime(): int
    {

        $interval = $this->startDay->diff(new DateTime());
        if ($interval->format('%y') < 2){
           return 0;
        }
        else return $interval->format('%y') - 1;

    }
}
