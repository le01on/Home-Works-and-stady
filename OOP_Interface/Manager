<?php
declare(strict_types=1);
require_once 'EmployeeInterface';
require_once 'ManagerInterface';

class Manager implements EmployeeInterface, ManagerInterface
{
    private $name;
    private $age;
    private $salary;
    private $position;
    private $startDay;
    private $employees = [];

    public function __construct(string $name, int $age, DateTimeInterface $startDay, float $salary, string $position)
    {
        $this->name = $name;
        $this->setAge($age);
        $this->setStartDay($startDay);
        $this->setSalary($salary);
        $this->position = $position;
    }

    public function addEmployee(EmployeeInterface $employee): void
    {
        $this->employees[] = $employee;// TODO: Implement addEmployee() method.
    }

    public function deleteWorker( $employee)
    {
        foreach ($this->employees as $key=>$value)
        {
            if($value == $employee){
                unset($this->employees[$key]);
            }
        }
    }

    public function getCountEmployees(): int
    {
       $result = count($this->employees);
       return $result; // TODO: Implement getCountEmployees() method.
    }

    public function getEmployees(): array
    {
       return $this->employees; // TODO: Implement getEmployees() method.
    }

    public function setPosition($position)
    {
        if ($this->checkPosition($position)) {
            $this->position = $position;
        }
    }

    public function getPosition(): string
    {
        return $this->position; // TODO: Implement getPosition() method.
    }

    public function setStartDay($startDay): DateTimeInterface
    {
        $date = new $startDay;
        $date->format('Y-m-d');
        return $this->startDay = $startDay;
    }

    public function getStartDay(): object
    {
        return $this->startDay; // TODO: Implement getStartDay() method.
    }

    public function setName($name) {
        $this->name = $name;
    }
    public function getName(): string {
        return $this->name;
    }

    public function setAge($age) {
        if ($this->checkAge($age)) {
            $this->age = $age;
        }
    }

    public function getAge() {
        return $this->age;
    }

    public function setSalary($salary)
    {
        $this->salary = $salary;
    }
    public function getSalary(): float {
        $firstSalary = $this->salary + ($this->salary * $this->workTime() * 0.05);
        return floor($firstSalary + ($this->salary * $this->getCountEmployees() * 0.02));
    }

    private function checkAge($age) {
        if ($age >= 1 && $age < 100) {
            return true;
        } return false;
    }

    private function checkPosition($position) {
        if ($position == "worker" || $position == "manager") {
            return true;
        }
        return false;
    }

    private function workTime(): int
    {
        $nowDay = new DateTime('now');
        $interval = $this->startDay->diff($nowDay);
        if ($interval->format('%y') < 2){
            return 0;
        }
        else return $interval->format('%y') - 1;
    }
}